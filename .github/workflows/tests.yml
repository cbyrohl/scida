# based on https://github.com/cjolowicz/cookiecutter-hypermodern-python, MIT License, Copyright Â© 2020 Claudio Jolowicz

name: Tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      run_full_matrix:
        description: 'Run the full matrix of Python versions'
        required: false
        default: 'false'

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        session: [tests]
        python-version: ['3.10']
        include:
          - python-version: '3.9'
            os: ubuntu-latest
            session: tests
            if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_full_matrix == 'true' }}
          - python-version: '3.11'
            os: ubuntu-latest
            session: tests
            if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_full_matrix == 'true' }}
          - python-version: '3.12'
            os: ubuntu-latest
            session: tests
            if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_full_matrix == 'true' }}
    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --constraint=${PWD}/.github/workflows/constraints.txt pip
          pip --version

      - name: Upgrade pip in virtual environments
        shell: python
        run: |
          import os
          import pip

          with open(os.environ["GITHUB_ENV"], mode="a") as io:
              print(f"VIRTUALENV_PIP={pip.__version__}", file=io)

      - name: Install Poetry
        run: |
          pipx install --pip-args=--constraint=${PWD}/.github/workflows/constraints.txt poetry
          pipx inject --pip-args=--constraint=${PWD}/.github/workflows/constraints.txt poetry poetry-plugin-export
          poetry --version

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=${PWD}/.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=${PWD}/.github/workflows/constraints.txt nox nox-poetry
          nox --version

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import sys

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])

          print("::set-output name=result::{}".format(result))

      - name: Restore pre-commit cache
        uses: actions/cache@v3
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      - name: Download test data
        uses: ./.github/actions/get-testdata-all
        with:
          outputfolder: $HOME/testdata

      - name: Set test data folder
        run: |
          echo "SCIDA_TESTDATA_PATH=$HOME/testdata" >> "$GITHUB_ENV"

      - name: Run Nox
        run: |
          export SCIDA_TESTDATA_PATH=${{ env.SCIDA_TESTDATA_PATH }}
          echo "test data path: $SCIDA_TESTDATA_PATH"
          echo "test data path content: $(ls $SCIDA_TESTDATA_PATH)"
          nox --python=${{ matrix.python-version }}

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: "actions/upload-artifact@v3"
        with:
          name: coverage-data
          path: ".coverage.*"

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs/_build
    continue-on-error: ${{ github.event.inputs.run_full_matrix == 'false' && matrix.full_matrix != true }}

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: |
          pip install --constraint=${PWD}/.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pipx install --pip-args=--constraint=${PWD}/.github/workflows/constraints.txt poetry
          poetry --version

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=${PWD}/.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=${PWD}/.github/workflows/constraints.txt nox nox-poetry
          nox --version

      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage data and display human readable report
        run: |
          nox --session=coverage

      - name: Create coverage report
        run: |
          nox --session=coverage -- xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3.1.0
